<?xml version="1.0" encoding="ISO-8859-1"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:duty="http://www.springframework.org/schema/duty"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/duty http://www.springframework.org/schema/duty/spring-duty-3.0.xsd">

	<context:annotation-config/>
    <context:component-scan base-package="io.tilt.minka"/>
    
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
    
    <!-- si no hay properties: la configuracion se llena de valores predeterminados -->
    <bean id="config" class="io.tilt.minka.api.Config"/>
        
    <bean id="clientHolder" class="io.tilt.minka.domain.DependencyPlaceholder"/>
    
    <!-- ID del shard: entregado A Leader/Follower solo informativamente  -->
    <bean id="shardId" class="io.tilt.minka.domain.TCPShardIdentifier">
        <constructor-arg ref="config" />
    </bean>

    <!-- spectator extenders can be reused for building siblings -->
    <bean id="spectatorSupplier" class="io.tilt.minka.core.task.impl.SpectatorSupplier">
        <constructor-arg ref="config" />
    </bean>
    
    <bean id="syncFactory" class="io.tilt.minka.core.task.impl.SynchronizedFactoryImpl"/>
    <bean id="agentFactory" class="io.tilt.minka.core.task.impl.SynchronizedAgentFactoryImpl"/>
    
    <!-- Semaforo para sincronizar orden y permisos de tareas -->
    <bean id="scheduler" class="io.tilt.minka.core.task.impl.SchedulerImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="spectatorSupplier" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="syncFactory" />
        <constructor-arg ref="agentFactory" />
    </bean>
        
    <!-- contenedor del lider cambiante -->
    <bean id="leaderShardContainer"
        class="io.tilt.minka.core.task.impl.ZookeeperLeaderShardContainer">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="spectatorSupplier" />
    </bean>

    <!-- Subscripcion, envio y recepcion de eventos (integracion leader-follower)  -->
    <bean id="eventBroker" class="io.tilt.minka.broker.impl.SocketBroker">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="scheduler" />
    </bean>
    
    <!-- ============================================================================================
    
    SERVICIOS DEL FOLLOWER
    
    ===============================================================================================-->
        
    <bean id="partition" class="io.tilt.minka.domain.ShardedPartition">
        <constructor-arg ref="shardId" />
    </bean>
        
    <bean id="heartbeatFactory" class="io.tilt.minka.core.follower.impl.HeartbeatFactoryImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="clientHolder" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    <!-- Emite heartbeats para el Lider -->
    <bean id="heartpump" class="io.tilt.minka.core.follower.impl.HeartpumpImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <bean id="partitionManager" class="io.tilt.minka.core.follower.impl.PartitionManagerImpl">        
        <constructor-arg ref="clientHolder" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="heartbeatFactory" />
    </bean>
    
    <!-- Maneja la particion a traves del delegado -->
    <bean id="leaderEventsHandler" class="io.tilt.minka.core.follower.LeaderEventsHandler">
        <constructor-arg ref="config" />
        <constructor-arg ref="clientHolder" />        
        <constructor-arg ref="partition" />
        <constructor-arg ref="partitionManager" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <!-- simplemente bootstrapea los servicios -->
    <bean id="follower" class="io.tilt.minka.core.follower.Follower">
        <constructor-arg ref="config" />
        <constructor-arg ref="heartpump" />
        <constructor-arg ref="leaderEventsHandler" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="heartbeatFactory" />
        <constructor-arg ref="partition" />
    </bean>
        
    <!-- ============================================================================================
    
    SERVICIOS DEL LEADER
      
    ===============================================================================================-->
    
    <bean id="shardingScheme" class="io.tilt.minka.core.leader.data.ShardingScheme"/>
        
    <bean id="entityDao" class="io.tilt.minka.core.leader.EntityDao.FakeDao"/>
    
    <bean id="schemeRepository" class="io.tilt.minka.core.leader.data.SchemeRepository">
    	<constructor-arg ref="shardingScheme" />
    	<constructor-arg ref="shardId" />
    </bean>																																														
    
    <!-- Balancea las tareas -->
    <bean id="distributor" class="io.tilt.minka.core.leader.distributor.Distributor">
        <constructor-arg ref="config" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="shardingScheme" />
        <constructor-arg ref="schemeRepository" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="entityDao" />
        <constructor-arg ref="clientHolder" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>

    <!-- acceso write-only a la tabla -->
    <bean id="schemeSentry" class="io.tilt.minka.core.leader.SchemeSentry">
        <constructor-arg ref="shardingScheme" />
        <constructor-arg ref="scheduler" />
    </bean>
    
    <!-- Pastorea los followers -->
    <bean id="proctor" class="io.tilt.minka.core.leader.Proctor">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardingScheme" />
        <constructor-arg ref="schemeSentry" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>

    <!-- Pastorea los followers -->
    <bean id="followerEventsHandler" class="io.tilt.minka.core.leader.FollowerEventsHandler">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardingScheme" />
        <constructor-arg ref="schemeSentry" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="shardId" />
    </bean>
    
    <!-- Integracion entre el cliente y el Leader -->
    <bean id="clientEventsHandler" class="io.tilt.minka.core.leader.ClientEventsHandler">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardingScheme" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="schemeRepository" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="shardId" />
    </bean>
    
    <!-- simplemente bootstrapea los servicios -->
    <bean id="leader" class="io.tilt.minka.core.leader.Leader">
        <constructor-arg ref="config" />
        <constructor-arg ref="proctor" />
        <constructor-arg ref="distributor" />
        <constructor-arg ref="followerEventsHandler" />
        <constructor-arg ref="clientEventsHandler" />        
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="eventBroker" />
    </bean>
    
    <bean id="schemeViews" class="io.tilt.minka.api.inspect.SchemeViews">
        <constructor-arg ref="leaderShardContainer"/>
        <constructor-arg ref="shardingScheme"/>
    </bean>
    <!-- ============================================================================================
    
    ENSAMBLE
      
    ===============================================================================================-->
    
    <!-- Integracion con el cliente  -->
    <bean id="minkaClient" class="io.tilt.minka.api.Client">
        <constructor-arg ref="config" />
        <constructor-arg ref="leader" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="clientEventsHandler" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="schemeViews" />
    </bean>
    
    <bean id="configValidator" class="io.tilt.minka.api.ConfigValidator"/>
    
    <!-- inicia los servicios -->
    <bean id="bootstrap" class="io.tilt.minka.core.task.Bootstrap" destroy-method="stop">
        <constructor-arg ref="config" />
        <constructor-arg ref="configValidator" />
        <constructor-arg ref="spectatorSupplier" />
        <constructor-arg value="true" />
        <constructor-arg ref="leader" />
        <constructor-arg ref="follower" />
        <constructor-arg ref="clientHolder" />
        <constructor-arg ref="scheduler" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="eventBroker" />
    </bean>
    
</beans>