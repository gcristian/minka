<?xml version="1.0" encoding="ISO-8859-1"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:duty="http://www.springframework.org/schema/duty"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/duty http://www.springframework.org/schema/duty/spring-duty-3.0.xsd">

    <context:component-scan base-package="io.tilt.minka"/>

    <util:properties id="minka-properties" 
        ignore-resource-not-found="true" 
        location="file://${minka.config.filepath:minka.properties}" />
    
    <!-- si no hay properties: la configuracion se llena de valores predeterminados -->
    <bean id="config" class="io.tilt.minka.api.Config">
        <constructor-arg ref="minka-properties" />
    </bean>
    
    <!-- ID del shard: entregado A Leader/Follower solo informativamente  -->
    <bean id="shardId" class="io.tilt.minka.domain.NetworkShardIDImpl">
        <constructor-arg ref="config" />
    </bean>

    <!-- spectator extenders can be reused for building siblings -->
    <bean id="spectatorSupplier" class="io.tilt.minka.business.impl.SpectatorSupplier">
        <constructor-arg ref="config" />
    </bean>
    
    <!-- Semaforo para sincronizar orden y permisos de tareas -->
    <bean id="coordinator" class="io.tilt.minka.business.impl.CoordinatorImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="spectatorSupplier" />
        <constructor-arg ref="shardId" />
    </bean>
        
    <!-- contenedor del lider cambiante -->
    <bean id="leaderShardContainer"
        class="io.tilt.minka.business.impl.ZookeeperLeaderShardContainer">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="spectatorSupplier" />
    </bean>

    <!-- Subscripcion, envio y recepcion de eventos (integracion leader-follower)  -->
    <bean id="eventBroker" class="io.tilt.minka.broker.impl.SocketBroker">
        <constructor-arg ref="config" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="coordinator" />
    </bean>
    
    <!-- ============================================================================================
    
    SERVICIOS DEL FOLLOWER
    
    ===============================================================================================-->
        
    <bean id="partition" class="io.tilt.minka.domain.Partition">
        <constructor-arg ref="shardId" />
    </bean>
    
    <bean id="heartbeatBuilder" class="io.tilt.minka.business.follower.impl.HeartbeatBuilderImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="partitionDelegate" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    <!-- Emite heartbeats para el Lider -->
    <bean id="heartpump" class="io.tilt.minka.business.follower.impl.HeartpumpImpl">
        <constructor-arg ref="config" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <bean id="partitionManager" class="io.tilt.minka.business.follower.impl.PartitionManagerImpl">        
        <constructor-arg ref="partitionDelegate" />
        <constructor-arg ref="partition" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <!-- Maneja la particion a traves del delegado -->
    <bean id="leaderConsumer" class="io.tilt.minka.business.follower.LeaderConsumer">
        <constructor-arg ref="config" />
        <constructor-arg ref="partitionDelegate" />        
        <constructor-arg ref="partition" />
        <constructor-arg ref="partitionManager" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <!-- simplemente bootstrapea los servicios -->
    <bean id="follower" class="io.tilt.minka.business.follower.Follower">
        <constructor-arg ref="config" />
        <constructor-arg ref="heartpump" />
        <constructor-arg ref="leaderConsumer" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="heartbeatBuilder" />
    </bean>
        
    <!-- ============================================================================================
    
    SERVICIOS DEL LEADER
      
    ===============================================================================================-->
    
    <bean id="partitionTable" class="io.tilt.minka.business.leader.PartitionTable"/>
    
    <util:map id="balancersMap" key-type="io.tilt.minka.business.leader.distributor.Balancer.BalanceStrategy" 
        value-type="io.tilt.minka.business.leader.distributor.Balancer">
        <entry key="EVEN_SIZE">
            <!-- Estrategia para distribuir entidades en forma pareja: iguales cantidades -->
            <bean id="balancer" class="io.tilt.minka.business.leader.distributor.EvenSizeBalancer">
                <constructor-arg ref="config" />
            </bean>
        </entry>
        <entry key="FAIR_LOAD">
            <!-- Estrategia para distribuir entidades en forma justa: clustering por carga de trabajo -->
            <bean id="balancer" class="io.tilt.minka.business.leader.distributor.FairWorkloadBalancer">
                <constructor-arg ref="config" />
                <constructor-arg>
                    <bean id="partitionResolver" 
                        class="io.tilt.minka.business.leader.distributor.ClassicalPartitionSolver"/>
                </constructor-arg>
            </bean>        
        </entry>
        <entry key="SPILL_OVER">
            <!-- Estrategia para distribuir entidades en por derrame: para disponibilidad -->
            <bean id="balancer" class="io.tilt.minka.business.leader.distributor.SpillOverBalancer">
                <constructor-arg ref="config" />
            </bean>        
        </entry>
    </util:map>
    
    <bean id="dutyDao" class="io.tilt.minka.business.leader.DutyDao.SpectatorDutyDao">
    </bean>
    
    <!-- Balancea las tareas -->
    <bean id="distributor" class="io.tilt.minka.business.leader.distributor.Distributor">
        <constructor-arg ref="config" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="partitionTable" />
        <constructor-arg ref="auditor" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="balancersMap" />
        <constructor-arg ref="dutyDao" />
        <constructor-arg ref="partitionMaster" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>

    <!-- acceso write-only a la tabla -->
    <bean id="auditor" class="io.tilt.minka.business.leader.Auditor">
        <constructor-arg ref="partitionTable" />
        <constructor-arg ref="coordinator" />
    </bean>
    
    <!-- Pastorea los followers -->
    <bean id="shepherd" class="io.tilt.minka.business.leader.Shepherd">
        <constructor-arg ref="config" />
        <constructor-arg ref="partitionTable" />
        <constructor-arg ref="auditor" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>

    <!-- Pastorea los followers -->
    <bean id="followerConsumer" class="io.tilt.minka.business.leader.FollowerConsumer">
        <constructor-arg ref="config" />
        <constructor-arg ref="partitionTable" />
        <constructor-arg ref="auditor" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="shardId" />
    </bean>
    

    <!-- Integracion entre el cliente y el Leader -->
    <bean id="clientMediator" class="io.tilt.minka.business.leader.ClientMediator">
        <constructor-arg ref="config" />
        <constructor-arg ref="partitionTable" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="auditor" />
        <constructor-arg ref="shardId" />
    </bean>
    
    <!-- simplemente bootstrapea los servicios -->
    <bean id="leader" class="io.tilt.minka.business.leader.Leader">
        <constructor-arg ref="config" />        
        <constructor-arg>
            <list>
                <ref bean="shepherd"/>
                <ref bean="distributor"/>
                <ref bean="followerConsumer"/>                
                <ref bean="clientMediator"/>
            </list>
        </constructor-arg>        
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="eventBroker" />
    </bean>
    
 
    <!-- ============================================================================================
    
    ENSAMBLE
      
    ===============================================================================================-->
        
    <!-- Integracion con el cliente  -->
    <bean id="partitionService" class="io.tilt.minka.api.PartitionService">
        <constructor-arg ref="leader" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="clientMediator" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="leaderShardContainer" />
    </bean>
    
    <bean id="configValidator" class="io.tilt.minka.api.ConfigValidator"/>
    
    <!-- inicia los servicios -->
    <bean id="bootstrap" class="io.tilt.minka.business.Bootstrap" destroy-method="close">
        <constructor-arg ref="config" />
        <constructor-arg ref="configValidator" />
        <constructor-arg ref="spectatorSupplier" />
        <constructor-arg value="true" />
        <constructor-arg ref="leader" />
        <constructor-arg ref="follower" />
        <constructor-arg ref="partitionDelegate" />
        <constructor-arg ref="coordinator" />
        <constructor-arg ref="leaderShardContainer" />
        <constructor-arg ref="shardId" />
        <constructor-arg ref="eventBroker" />
        <constructor-arg ref="partitionService" />
    </bean>
    
</beans>